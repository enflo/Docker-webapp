pipeline {
    agent any
    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Declare variables') {
            steps {
                /* GLOBAL VARS */
                env.DOCKER_COMPOSE_FILE = "docker-compose.yml"
                env.DOCKER_COMPOSE_FILE_PRO = "docker-compose.prod.yml"
                env.DOCKER_REGISTRY = "${DOCKER-REGISTRY}" /* Use Docker-hub or internal docker-registry o GCLOUD registry or AWS ECR, etc */
                /* NGINX VARS */
                env.DOCKER_NGINX_NAME = "nginx"
                env.DOCKER_NGINX_FILE = "../Docker/web/nginx/Dockerfile"
                env.DOCKER_NGINX_CONTEXT = "../Docker/web/nginx/"
                /* PHP VARS */
                env.DOCKER_PHP_NAME = "php"
                env.DOCKER_PHP_FILE = "../Docker/web/php/Dockerfile"
                env.DOCKER_PHP_CONTEXT = "../Docker/web/php/"
                /* Filebeat VARS */
                env.DOCKER_PHP_NAME = "filebeat"
                enc.DOCKER_FILEBEAT_FILE = "../Docker/beats/Dockerfile"
                env.DOCKER_FILEBEAT_CONTEXT = "../Docker/beats/"
            }
        }

        stage('Set docker file') {
            steps {
                /* NGINX ADD CODE */
                sh "echo 'ADD ./CODE/public /code' >> ${env.DOCKER_NGINX_FILE}"
                /* PHP ADD CODE */
                sh "echo 'ADD ./CODE/public /code' >> ${env.DOCKER_PHP_FILE}"
            }
        }

        stage ('Rearrange docker-compose files ') {
            steps {
                /* Delete dev docker-compose.override, this file only use into development enviroment */
                sh "rm -rf ../docker-compose.override.yml"
                /* Copy docker-compose.prod into / */
                sh "cp docker-compose.prod.yml ../docker-compose.prod.yml"
                /* Copy secrets into / */
                sh "cp common_secrets.txt ../common_secrets.txt"
            }
        }

        stage('Docker build') {
            steps {
                /* NGINX BUILD */
                sh "docker build -t ${env.DOCKER_NGINX_NAME}:${env.BUILD_ID} -f ${env.DOCKER_NGINX_FILE} ${env.DOCKER_NGINX_CONTEXT} --no-cache"
                /* PHP BUILD */
                sh "docker build -t ${env.DOCKER_PHP_NAME}:${env.BUILD_ID} -f ${env.DOCKER_PHP_FILE} ${env.DOCKER_PHP_CONTEXT} --no-cache"
                /* FILEBEAT BUILD */
                sh "docker build -t ${env.DOCKER_FILEBEAT_NAME}:${env.BUILD_ID} -f ${env.DOCKER_FILEBEAT_FILE} ${env.DOCKER_FILEBEAT_CONTEXT} --no-cache"
            }
        }

        stage('Docker tag'){
            steps {
                /* NGINX TAG */
                sh "docker tag ${env.DOCKER_NGINX_NAME}:${env.BUILD_ID} ${env.DOCKER_REGISTRY}/${env.DOCKER_NGINX_NAME}:${env.BUILD_ID}"
                /* PHP TAG */
                sh "docker tag ${env.DOCKER_PHP_NAME}:${env.BUILD_ID} ${env.DOCKER_REGISTRY}/${env.DOCKER_PHP_NAME}:${env.BUILD_ID}"
                /* FILEBEAT TAG */
                sh "docker tag ${env.DOCKER_FILEBEAT_NAME}:${env.BUILD_ID} ${env.DOCKER_REGISTRY}/${env.DOCKER_FILEBEAT_NAME}:${env.BUILD_ID}"
            }
        }

        stage ('Docker push') {
            /* NGINX PUSH */
            sh "docker-compose push ${env.DOCKER_REGISTRY}/${env.DOCKER_NGINX_NAME}:${env.BUILD_ID}"
            /* PHP PUSH */
            sh "docker-compose push ${env.DOCKER_REGISTRY}/${env.DOCKER_PHP_NAME}:${env.BUILD_ID}"
            /* FILEBEAT PUSH */
            sh "docker-compose push ${env.DOCKER_REGISTRY}/${env.DOCKER_FILEBEAT_NAME}:${env.BUILD_ID}"
        }

        stage ('Generate secrets') {
            steps {
                /* Generate secrets file */
                sh "docker secret create common-secrets common_secrets.txt"
            }
        }

        stage ('Deploy docker swarm') {
            steps {
                /* Deploy */
                sh "docker stack deploy --compose-file ${env.DOCKER_COMPOSE_FILE} --compose-file ${env.DOCKER_COMPOSE_FILE_PROD} ${env.JOB_NAME}"
            }
        }

    }

    post {
        success{ "The Deploy process completed" }
        failure{ "The Deploy process failed" }
    }
}
